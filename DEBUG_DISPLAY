<?php
/**
 * == Об этой сути ==
 * 
 * Код для добавления в wp-config.php для улучшения информации, доступной для отладки.
 * 
 * Обычно вы добавляете этот код под настройками базы данных, языка и соли
 * 
 * О .. и * сделайте * убедитесь, что вы изменили путь к файлу журнала на правильный путь к файлу на вашем сервере (убедитесь, что он существует).
 * 
 * Установите для WP_DEBUG_DISPLAY значение false, если вы не хотите, чтобы ошибки отображались на экране.
 * Независимо от настроек WP_DEBUG, ошибки PHP, предупреждения и уведомления теперь должны отображаться в вашем файле error.log.
 * 
 * == DO == проверьте, работает ли все это, используя код в конце gist .
 * 
 * Если ведение журнала ошибок не работает, попробуйте:
 * - Проверьте, был ли файл создан вообще, если нет, загрузите пустой (текстовый) файл с именем error.log и повторите попытку.
 * - Поиграйте с настройками CHMOD для файла error.log, чтобы узнать, какие разрешения необходимы для настройки вашего сервера.
 * - Если вы разместите error.log за пределами корня веб-сайта: это будет работать не во всех настройках сервера. Возможно, вам потребуется переместить каталог и файл в корневой каталог web.
 *
 *
 */


/**
 * Для разработчиков: режим отладки WordPress.
 *
 * Измените это значение на true, чтобы включить отображение уведомлений во время разработки.
 * Разработчикам плагинов и тем настоятельно рекомендуется использовать WP_DEBUG
 * в их средах разработки.
 */

/**
 * Включите отчеты об ошибках WP.
 */
define( 'WP_DEBUG', true );



/**
 * [Необязательно] Загружает версии для разработки (не уменьшенные) всех стандартных сценариев WP и CSS и отключает сжатие и объединение.
 *
 * Этот параметр часто также соблюдается темами и плагинами, но без гарантии!
 */
// define( 'SCRIPT_DEBUG', true );


/**
 * [Необязательно] Сохранять запросы для анализа
 * Определение SAVEQUERIES сохраняет запросы к базе данных в массив и этот массив
 * может отображаться, чтобы помочь проанализировать эти запросы. Информация сохраняется при каждом запросе,
 * какая функция вызвала его и сколько времени потребовалось для выполнения этого запроса.
 *
 * ПРИМЕЧАНИЕ: это повлияет на производительность вашего сайта, поэтому обязательно включите это
 * выключен, когда вы не выполняете отладку.
 *
 * Чтобы получить доступ к информации, вы можете добавить следующий фрагмент в нижний колонтитул вашей темы:
 *
 * <?php
 * if ( current_user_can( 'администратор' ) ) {
 * глобальный $ wpdb;
 * echo "<pre>";
 * print_r($wpdb-> запросы);
 * echo "</pre>";
 *	}
 * ?>
 */
// define('SAVEQUERIES', true);



/**
 * Включите ведение журнала ошибок и отображение ошибок на экране, если вы находитесь в режиме отладки.
 */
@error_reporting( -1 ); // все, включая E_STRICT и другие недавно введенные уровни ошибок.
@ini_set( 'log_errors', true );
@ini_set( 'log_errors_max_len', '0' );

/**
 * Измените путь на один на вашем веб-сервере, каталог не обязательно должен находиться в корневом каталоге web
 * Не забудьте изменить этот файл dir + и добавить файл .htaccess, запрещающий доступ ко всем
 * 
 */
@ini_set( 'error_log', '/path/to/writable/file/logs/ошибка.log' );

если ( WP_DEBUG !== true ) {
 @ini_set( 'display_errors', false); // Не показывать ошибки на экране
}
еще {
 @ini_set( 'display_errors', true ); // Показывать ошибки на экране
 @ini_set( 'html_errors', true );
 @ini_set( 'docref_root', 'http://php.net/manual / ' );
 @ini_set( 'docref_ext', '.php' );
	if ( ! extension_loaded( 'xdebug' ) ) {
 @ini_set( 'error_prepend_string', ' ' );
 @ini_set( 'error_append_string', " );
	}
}


/**
 * Добавляет обратную трассировку к ошибкам PHP.
 * 
 */
if ( ! function_exists( 'jrf_process_error_backtrace' ) ) {
	функция  jrf_process_error_backtrace( $errno, $errstr, $errfile, $errline ) {
		/*
 * Показывать только те ошибки, которые находятся в пределах текущей настройки error_reporting().
 * Поскольку WP (и плагины / темы) иногда меняют уровень ошибок, вы можете прокомментировать
 * отключите это, если вы хотите убедиться, что видите все ошибки.
		 */
		if( ! ( error_reporting() & $errno ) ) {
			Возврат;
		}

		/**
 * Убедитесь, что присутствуют все уровни ошибок. Совместимость с PHP 5.2.
		 */
		if ( ! defined( 'E_DEPRECATED' ) ) {
 define( 'E_DEPRECATED', 8192 );
		}
		if ( ! defined( 'E_USER_DEPRECATED' ) ) {
 define( 'E_USER_DEPRECATED', 16384 );
		}
		
	
		переключатель ( $ errno ) {
			Случай E_WARNING  :
			Случай E_USER_WARNING  :
			Случай E_STRICT  :
			Случай E_NOTICE  :
			Случай E_USER_NOTICE  :
			E_DEPRECATED case :
			E_USER_DEPRECATED case :
				$type = 'предупреждение';
				$fatal = false;
				перерыв;
			По умолчанию :
				$type = 'неустранимая ошибка';
				$fatal = true;
				перерыв;
		}
		$trace = debug_backtrace();
 array_shift( $trace );
		if ( php_sapi_name() == 'cli' && ini_get('display_errors' ) ) {
			'Обратная трассировка из ' echo . $type . ' \" . $ errstr . '\' at ' . $errfile . ' ' . $errline . ':' . "\n";
			foreach ( $trace  как $item ) {
				' ' эхо . ( isset( $item['file'] ) ? $item['file'] : '<неизвестный файл>' ) . ' ' . ( isset( $item['line'] ) ? $item['строка']: '<неизвестная строка>' ) . ' вызов ' . $item['функция'] . '()' . "\ н";
			}
		}
		elseif ( ini_get( 'display_errors' ) ) {
			'<p class="error_backtrace">' echo . "\ n";
			'Обратная трассировка из ' echo . $type . ' \" . $ errstr . '\' at ' . $errfile . ' ' . $errline . ':' . "\n";
			'</p>' echo . "\ n";
			'<ol class="error_backtrace_list">' echo . "\ n";
			foreach ( $trace  как $item ) {
				' <li>' echo . ( isset( $item['file'] ) ? $item['file'] : '<неизвестный файл>' ) . ' ' . ( isset( $item['line'] ) ? $item['строка']: '<неизвестная строка>' ) . ' вызов ' . $item['function'] . '()</li>' . "\n";
			}
			'</ol>' echo . "\ n";
		}
		if ( ini_get( 'log_errors' ) ) {
			$items = array();
			foreach ( $trace  как $item ) {
				$items[] = ( isset( $item['file'] ) ? $item['file'] : '<неизвестный файл>' ) . ' ' . ( isset( $item['line'] ) ? $item['строка']: '<неизвестная строка>' ) . ' вызов ' . $item['function'] . '()';
			}
			$message = 'Обратная трассировка из ' . $type . ' \" . $ errstr . '\' at ' . $errfile . ' ' . $errline . ': ' . trim( join( ' | ', $items ) );
 error_log( $message );
		}
	
 flush();

		если ( $fatal ) {
 выход ( 1 );
		}

		возврат false ; // Убедитесь, что он хорошо работает с другими обработчиками ошибок (удалите, если другие обработчики ошибок не установлены).
	}

 set_error_handler( 'jrf_process_error_backtrace' );
}


/**
 * Теперь проверьте, работает ли все это, раскомментировав приведенную ниже строку
 *
 * Если все в порядке:
 * - Если для параметра WP_DEBUG установлено значение true: на экране должно появиться красное уведомление об ошибке 
 * - Независимо от настройки WP_DEBUG, приведенное ниже сообщение об ошибке должно было быть записано в ваш файл журнала. * Сделайте * проверьте, было ли это....
 */
//trigger_error( 'Тестирование 1 ..2..3 .. Отладочный код работает!', E_USER_NOTICE );
